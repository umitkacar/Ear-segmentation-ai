name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry==1.8.3
    
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry install --no-interaction
    
    - name: Run linting
      run: |
        poetry run ruff check src/ tests/
        poetry run black --check src/ tests/
    
    - name: Run type checking
      run: |
        poetry run mypy src/ --ignore-missing-imports
    
    - name: Run security checks
      run: |
        poetry run bandit -r src/ -c pyproject.toml
    
    - name: Run tests with coverage
      run: |
        poetry run pytest tests/ -v --cov=src/earsegmentationai --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false